wsif.version: 1.1.0
libwsif.version: 1.2.0
woas.pages: 1

woas.page.title: WoaS Subversion developer guide
woas.page.attributes: 
woas.page.length: 12995
woas.page.encoding: 8bit/plain
woas.page.disposition: inline
woas.page.boundary: DxdGayQKpB

--DxdGayQKpB
[[Special::TOC]]
= WoaS Subversion developer guide
Welcome, developers, to the Wiki on a Stick (WoaS) community! The WoaS community offers various places you can visit to keep in touch with others. By visiting these, you can see what's already being done and get an idea of how and where you can help:
* [[http://sourceforge.net/tracker/?words=tracker_browse&sort=open_date&sortdir=desc&offset=0&group_id=155218&atid=794925&assignee=&status=&category=&artgroup=&keyword=&submitter=&artifact_id=|WoaS bug tracker]]
* [[http://woas.iragan.com/viewtopic.php?id=217|WoaS development IRC channel]] on the [[http://freenode.net/irc_servers.shtml|freenode IRC server]]
* [[https://lists.sourceforge.net/lists/listinfo/stickwiki-devel|WoaS development mailing list]]
* [[http://sourceforge.net/tracker/?atid=794928&group_id=155218&func=browse|WoaS feature requests]]
* [[http://woas.iragan.com/index.php|WoaS forums]]
* [[http://cia.vc/stats/project/stickwiki|WoaS project Subversion logs]]
Any help you can offer is heartily welcomed! If coding isn't your thing, you can dive into the forums, make some feature requests, and report any bugs you find by using the links above. If you're a coder, read on.

== Contributing code
WoaS uses [[http://subversion.apache.org/|Subversion]] for version control. This guide hopes to make it easy to use Subversion for WoaS development.

== Get a SourceForge account
You'll need a [[http://sourceforge.net/|SourceForge]] account so you can log into the WoaS Subversion server. If you already have one, great! If not, please create one now.

== Get added to the WoaS Subversion server
You'll also need to be added to the Subversion server by Legolas. Contact him in the [[http://woas.iragan.com/index.php|WoaS forums]] or by [[mailto://legolas558 _AT_ users.sourceforge.net|email]] to let him know you'd like to be a developer. He will give you the path to your development BRANCH.

== Reference tables
These are some terms that will often be used when working with Subversion:


{|
|+ <div style="background-color:lightblue; border-top:2px solid black; border-right:2px solid black; border-left:2px solid black;">GLOSSARY</div>
| *BRANCH* || Your personal directory on the server.
| *HEAD* || Hidden .svn directory in WORKINGCOPY containing most recent checked out revision.
| *REV* || A revision number (example: 32).
| *SOURCE* || URL or file name.
| *TRUNK* || The main project directory on the server.
| *URL* || A server path to TRUNK or a BRANCH.
| *WORKINGCOPY* || A local directory on your computer where you keep your copy.
|}

These are the paths you'll be using. Please edit the table, replacing *USERNAME* with your [[http://sourceforge.net/|SourceForge]] user name, replacing */PATH/ON/YOUR/COMPUTER* with the path to the local directory you will be using to do your development work:


{|
|+ <div style="background-color:lightblue; border-top:2px solid black; border-right:2px solid black; border-left:2px solid black;">PATH REFERENCE TABLE</div>
| *TRUNK * || [[https://stickwiki.svn.sourceforge.net/svnroot/stickwiki/trunk]]
| *BRANCH* || [[https://stickwiki.svn.sourceforge.net/svnroot/stickwiki/branches/USERNAME]]
| *WORKINGCOPY* || /PATH/ON/YOUR/COMPUTER
|}

These are codes Subversion will use to let you know what it's doing when you issue a command:


{|
|+ <div style="background-color:lightblue; border-top:2px solid black; border-right:2px solid black; border-left:2px solid black;">*COMMON STATUS CODES*</div>
| *CODE* || *WHAT IT MEANS*
| *A* || Item was added.
| *C* || Item conflicts with updates from the repository.
| *D* || Item was deleted.
| *G* || Item was merged.
| *M* || Item has been modified.
| *R* || Item was replaced.
| *U* || Item was updated.
| *?* || Item is unknown and is not under version control.
| *!* || Item is missing or incomplete.
|}

== Setup
# Create the local directory you'd like to use as your WORKINGCOPY.<br><br>
# Edit the *Path reference table* above with your information.<br><br>
# Use your paths in all of the following commands.<br><br>
# Copy TRUNK to BRANCH:{{{
svn copy TRUNK BRANCH
}}}
# Check out BRANCH to create WORKINGCOPY:{{{
svn co BRANCH WORKINGCOPY
}}}

== Make initial changes
# If you've already edited a copy of WoaS, you can copy your file(s) over those in WORKINGCOPY, overwriting them.<br><br>
# Compare WORKINGCOPY with HEAD line by line:{{{
svn diff WORKINGCOPY
}}}
# Check the status of WORKINGCOPY (display your changes):{{{
svn status WORKINGCOPY
}}}
# Commit initial changes to BRANCH, providing your SourceForge password when asked:{{{
svn commit WORKINGCOPY
}}}/Note that Subversion caches your password on your hard drive so you don't have to enter it manually again. If you don't wish it to do this, see [[http://svnbook.red-bean.com/en/1.5/svn-book.html#svn.serverconfig.netmodel.credcache]]./<br><br>
# List the changes in the editor that pops up, beginning each line with an asterisk followed by a space. If the initial commit comment is very long (for instance, if you overwrote files in the WORKINGCOPY with ones you'd already made changes to), just write, "* Initial commit."


== Standard routine
This is intended as a general reference. You may or may not need all the steps in this section in your standard routine, and you don't necessarily need to do them in the order shown.

=== Check for updates
* Check the status of WORKINGCOPY (display full revision information on all items):{{{
svn status -v WORKINGCOPY
}}}<table border="1" cellpadding="7"><tr><td align="center" bgcolor="lightblue" colspan="5">*What the status columns mean*</td></tr><tr><td>status codes</td><td>working copy revision</td><td>the revision in which it changed</td><td>who changed it</td><td>file name</td></tr></table><br>
* Check the status of WORKINGCOPY (display updated files):{{{
svn status -u WORKINGCOPY
}}}/Files that have been updated will have an asterisk next to them./

=== Update your copy
* Update HEAD with latest revision:{{{
svn update WORKINGCOPY
}}}
* Update HEAD with a *specific* revision:{{{
svn update -rREV WORKINGCOPY
}}}


=== Resolve conflicted files
* Manually:<br><br>
** If you have conflicts, Subversion will create some extra files in your WORKINGCOPY:{{{
FILENAME
FILENAME.mine
FILENAME.rREV
FILENAME.rREV
}}}/These are the conflicted file, your file before you updated, and the two revisions that are in conflict./<br><br>
** Examine the conflicted file (the one without a .mine or .rREV extension):{{{
svn cat FILENAME
}}}
** Find sections between triple angled brackets like this:{{{
<<<<<<< .mine
CONTENT
>>>>>>> .r2
}}}
** For each section you find, decide whether to keep, change, or get rid of the content inside the brackets.<br><br>
** Remove the angled bracket lines around each conflicted section you've fixed.<br><br>
** Type this command once all conflicted sections have been resolved:{{{
svn resolved
}}}/Subversion will clean up the files with the .mine and .rREV extensions for you./<br><br>
* Automatically by picking one of these:<br><br>
** Choose HEAD copy:{{{
svn resolve --accept base
}}}
** Choose *current* WORKINGCOPY (assuming you have *manually* handled the conflict):{{{
svn resolve --accept working
}}}
** Choose *previous* WORKINGCOPY (as it was before running svn update):{{{
svn resolve --accept mine-full
}}}
** Choose TRUNK copy (using the files you got by running svn update):{{{
svn resolve --accept theirs-full
}}}

=== Make your changes
* Make whatever changes you like to the files in WORKINGCOPY by working normally.

=== Tell Subversion about your changes
* Add a directory:{{{
svn mkdir DIRECTORYNAME
}}}
* Add a file:{{{
svn add FILENAME
}}}
* Change or overwrite a file:{{{
NO SVN COMMAND IS NEEDED FOR THIS
}}}
* Copy a file:{{{
svn cp SOURCE DESTINATION
}}}
* Delete a file:{{{
svn rm FILENAME
}}}
* Move a file:{{{
svn mv SOURCE DESTINATION
}}}

=== Examine your changes
* Check the logs of BRANCH, showing its ancestry:{{{
svn log -v WORKINGCOPY
}}}
* Check the logs of BRANCH, showing its ancestry since you copied it from TRUNK:{{{
svn log -v --stop-on-copy WORKINGCOPY
}}}/The oldest BRANCH revision number shown can be used as the TRUNK revision number when merging more recent revisions in BRANCH *to* TRUNK./<br><br>
* Compare WORKINGCOPY line by line with HEAD in *current* directory:{{{
svn diff
}}}
* Compare specific revision with specific revision line by line:{{{
svn diff URL@REV URL@REV
}}}
* Check the status of WORKINGCOPY (display your changes):{{{
svn status WORKINGCOPY
}}}

=== Undo changes
* Undo changes to a file or directory (revert to the HEAD copy):{{{
svn revert FILEORDIRECTORYNAME
}}}

=== Commit your changes
# Commit changes to the repository:{{{
svn commit WORKINGCOPY
}}}
# List the changes in the editor that pops up, beginning each line with an asterisk followed by a space.

=== Back up your copy
* Back up your WORKINGCOPY to another directory on your computer:<br><br>
** Make a hot (full) copy of your local Subversion repository:{{{
svnadmin hotcopy WORKINGCOPY BACKUPDIRECTORY
}}}
** Make a hot (full) copy of your local Subversion repository and *then* remove unused logs from your local Subversion repository:{{{
svnadmin hotcopy --clean-logs WORKINGCOPY BACKUPDIRECTORY
}}}

== Merging
Sometimes you'll need to merge two revisions to create a new, combined revision. Below are various ways to do this. Note that all merges happen in your WORKINGCOPY and only go onto the server when you commit the changes.

=== Merge to branch
==== Merge current revisions
# Merge *current* revisions from two different URLs:{{{
svn merge URL URL WORKINGCOPY
}}}
# Commit the merge to BRANCH after reviewing the merged WORKINGCOPY and resolving any conflicts:{{{
svn commit WORKINGCOPY
}}}
# Make a comment describing the merge (preferably with revision numbers) in the editor that pops up, beginning the line with an asterisk followed by a space.

==== Merge specific revisions
# Merge two specific revisions:{{{
svn merge URL@REV URL@REV WORKINGCOPY
}}}
# Commit the merge to BRANCH after reviewing the merged WORKINGCOPY and resolving any conflicts.{{{
svn commit WORKINGCOPY
}}}
# Make a comment describing the merge (preferably with revision numbers) in the editor that pops up, beginning the line with an asterisk followed by a space.<br><br>

==== Merge specific revisions
# Merge two specific revisions:{{{
svn merge -r REV:REV SOURCE WORKINGCOPY
}}}
# Commit the merge to BRANCH after reviewing the merged WORKINGCOPY and resolving any conflicts:{{{
svn commit WORKINGCOPY
}}}
# Make a comment describing the merge (preferably with revision numbers) in the editor that pops up, beginning the line with an asterisk followed by a space.<br><br>

=== Merge (reintegrate) current branch to trunk
# Change to WORKINGCOPY directory of your BRANCH:{{{
cd WORKINGCOPY
}}}
# Merge current TRUNK to WORKINGCOPY:{{{
svn merge TRUNK
}}}
# Commit the merge to BRANCH after reviewing the merged WORKINGCOPY and resolving any conflicts:{{{
svn commit WORKINGCOPY
}}}
# Change to WORKINGCOPY directory of TRUNK:{{{
cd WORKINGCOPY
}}}
# Merge (reintegrate) BRANCH to TRUNK:{{{
svn merge --reintegrate BRANCH
}}}/Subversion will merge the *current* BRANCH with the *current* TRUNK./<br><br>
# Make a comment describing the merge (preferably with revision numbers) in the editor that pops up.<br><br>
# Delete BRANCH after the merge is complete and you've verified that it worked properly:{{{
svn delete BRANCH -m "Removed branch."
}}}

=== Merge specific branch to trunk
# Create a MyTrunk WORKINGCOPY directory on your computer.<br><br>
# Change to that directory:{{{
cd MyTrunk
}}}
# Check out TRUNK to WORKINGCOPY:{{{
svn co TRUNK WORKINGCOPY
}}}
# Merge specific BRANCH with TRUNK to WORKINGCOPY:{{{
svn merge BRANCH -rREV:HEAD WORKINGCOPY
}}}
# Commit the merge to TRUNK after reviewing the merged WORKINGCOPY and resolving any conflicts{{{
svn commit WORKINGCOPY
}}}
# Make a comment describing the merge (preferably with revision numbers) in the editor that pops up, beginning the line with an asterisk followed by a space.

== A few additional useful commands
* Delete BRANCH from the server:{{{
svn delete BRANCH -m "* Removing obsolete branch from the WoaS project."
}}}
* Display the contents of a URL:{{{
svn list -v URL
}}}
* Display the logs for only the past X number of revisions (replace *X* with a number):{{{
svn log --limit X
}}}
* Resurrect a deleted directory or file in BRANCH:{{{
svn copy -rREV BRANCH BRANCH
}}}Or:{{{
svn copy -rREV BRANCH/FILE BRANCH/FILE
}}}
* Update WORKINGCOPY to mirror a new URL (use a different TRUNK):{{{
svn switch URL WORKINGCOPY
}}}
* Get help with an svn SUBCOMMAND:{{{
svn help SUBCOMMAND
}}}
** For example, try:{{{
svn help import
}}}
* Export a copy of WORKINGCOPY into another directory:{{{
svn export WORKINGCOPY DIRECTORY
}}}/Note that this copies all files and directories *except* Subversion directories or files. Also note that DIRECTORY has to be a nonexistent directory or the command won't work./
[[Tag::Help]]

--DxdGayQKpB
